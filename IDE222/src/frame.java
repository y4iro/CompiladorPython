
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.filechooser.*;
import javax.swing.text.*;
import javax.swing.tree.*;

public class frame extends javax.swing.JFrame {

    private String ruta;
    private final String formato = "txt";
    private boolean permiso;
    private boolean modificado;
    private boolean activo;
    private DefaultMutableTreeNode root = null;
    private DefaultTreeModel modelo;

    public frame() {
        initComponents();
        Code.setStyledDocument(new KeywordStyledDocument());
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setTitle("IDE - HEY");
        Code.setEnabled(false);
        ruta = null;
        permiso = false;
        nombreArchivo.setText("");
        jLabel1.setText("");
        modificado = false;
        activo = false;
        jTabbedPane2.setSelectedIndex(1);

        modelo = new DefaultTreeModel(root);
        Sintactico.setModel(modelo);
        Semántico.setModel(modelo);

        Errores.setEditable(permiso);
        Salida.setEditable(permiso);
        TablaHASH.setEditable(permiso);
        Lexico.setEditable(permiso);
        Sintactico.setEditable(permiso);
        Semántico.setEditable(permiso);
        CodigoIntermedio.setEditable(permiso);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jMenuItem9 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        Code = new javax.swing.JTextPane();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Lexico = new javax.swing.JTextPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        Sintactico = new javax.swing.JTree();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Semántico = new javax.swing.JTree();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        CodigoIntermedio = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Errores = new javax.swing.JTextPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Salida = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        terminal = new javax.swing.JTextArea();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        TablaHASH = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        Expandir = new javax.swing.JMenuItem();
        Colapsar = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        Expandir2 = new javax.swing.JMenuItem();
        Colapsar2 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        CompilarEjecutar = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        nombreArchivo = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();

        jMenuItem9.setText("jMenuItem9");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jPanel8.setBackground(new java.awt.Color(204, 204, 204));

        Code.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                CodeCaretUpdate(evt);
            }
        });
        Code.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CodeMouseClicked(evt);
            }
        });
        Code.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                CodeCaretPositionChanged(evt);
            }
        });
        jScrollPane8.setViewportView(Code);
        TextLineNumber lineNumber = new TextLineNumber(Code);
        jScrollPane8.setRowHeaderView(lineNumber);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        jScrollPane3.setViewportView(Lexico);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Léxico", jPanel1);

        jScrollPane9.setViewportView(Sintactico);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Sintáctico", jPanel5);

        jScrollPane4.setViewportView(Semántico);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Semántico", jPanel6);

        jScrollPane6.setViewportView(CodigoIntermedio);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Código Intermedio", jPanel7);

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));

        jScrollPane1.setViewportView(Errores);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1084, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Errores", jPanel9);

        jScrollPane2.setViewportView(Salida);

        terminal.setColumns(20);
        terminal.setRows(5);
        jScrollPane5.setViewportView(terminal);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Salida", jPanel10);

        jScrollPane7.setViewportView(TablaHASH);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1084, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Tabla HASH", jPanel11);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );

        jMenuBar1.setBackground(new java.awt.Color(204, 204, 204));

        jMenu1.setText("Archivo");
        jMenu1.setToolTipText("Crear Archivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i8.png"))); // NOI18N
        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i3.png"))); // NOI18N
        jMenuItem2.setText("Crear");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i1.png"))); // NOI18N
        jMenuItem3.setText("Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i2.png"))); // NOI18N
        jMenuItem4.setText("Guardar Como");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i4.png"))); // NOI18N
        jMenuItem5.setText("Cerrar");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);
        jMenu1.add(jSeparator2);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i9.png"))); // NOI18N
        jMenuItem10.setText("Salir");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Compilar");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        jMenuItem6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i5.png"))); // NOI18N
        jMenuItem6.setText("Léxico");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F10, 0));
        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i6.png"))); // NOI18N
        jMenuItem7.setText("Sintáctico");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        Expandir.setText("Expandir");
        Expandir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExpandirActionPerformed(evt);
            }
        });
        jMenu2.add(Expandir);

        Colapsar.setText("Colapsar");
        Colapsar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColapsarActionPerformed(evt);
            }
        });
        jMenu2.add(Colapsar);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F11, 0));
        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i7.png"))); // NOI18N
        jMenuItem8.setText("Semántico");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        Expandir2.setText("Expandir");
        Expandir2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Expandir2ActionPerformed(evt);
            }
        });
        jMenu2.add(Expandir2);

        Colapsar2.setText("Colapsar");
        Colapsar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Colapsar2ActionPerformed(evt);
            }
        });
        jMenu2.add(Colapsar2);
        jMenu2.add(jSeparator4);

        CompilarEjecutar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie.png"))); // NOI18N
        CompilarEjecutar.setText("COMPILAR Y EJECUTAR");
        CompilarEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompilarEjecutarActionPerformed(evt);
            }
        });
        jMenu2.add(CompilarEjecutar);

        jMenuBar1.add(jMenu2);

        jMenu7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i8.png"))); // NOI18N
        jMenu7.setToolTipText("Abrir archivo");
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu7MouseClicked(evt);
            }
        });
        jMenu7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu7ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu7);

        jMenu3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i3.png"))); // NOI18N
        jMenu3.setToolTipText("Crear archivo");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i1.png"))); // NOI18N
        jMenu5.setToolTipText("Guardar archivo");
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu5);

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i4.png"))); // NOI18N
        jMenu4.setToolTipText("Cerrar archivo");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        jMenu6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i5.png"))); // NOI18N
        jMenu6.setToolTipText("Léxico");
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu6);

        jMenu8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i6.png"))); // NOI18N
        jMenu8.setToolTipText("Sintáctico");
        jMenu8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu8MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu8);

        jMenu9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/i7.png"))); // NOI18N
        jMenu9.setToolTipText("Semántico");
        jMenu9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu9MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu9);

        nombreArchivo.setText("jMenu10");
        nombreArchivo.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        nombreArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreArchivoActionPerformed(evt);
            }
        });
        jMenuBar1.add(nombreArchivo);

        jMenu10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ie.png"))); // NOI18N
        jMenu10.setToolTipText("Semántico");
        jMenu10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu10MouseClicked(evt);
            }
        });
        jMenu10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu10ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu10);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        abrirArchivo();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        compilarLexico();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        compilarSintactico();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        crearArchivo();
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        if (modificado) {
            if (JOptionPane.showConfirmDialog(null, "¿Seguro que deseas cerrar el programa sin guardar cambios?", "ARCHIVO EDITADO", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                setVisible(false);
                dispose();
            }
        } else {
            setVisible(false);
            dispose();
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenu7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu7ActionPerformed

    }//GEN-LAST:event_jMenu7ActionPerformed

    private void jMenu7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseClicked
        abrirArchivo();
    }//GEN-LAST:event_jMenu7MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        crearArchivo();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        cerrarArchivo();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        cerrarArchivo();
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        compilarLexico();
    }//GEN-LAST:event_jMenu6MouseClicked

    private void jMenu8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu8MouseClicked
        compilarSintactico();
    }//GEN-LAST:event_jMenu8MouseClicked

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        compilarSemantico();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenu9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu9MouseClicked
        compilarSemantico();
    }//GEN-LAST:event_jMenu9MouseClicked

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        guardarArchivo();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        guardarComoArchivo();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        guardarArchivo();
    }//GEN-LAST:event_jMenu5MouseClicked

    private void nombreArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreArchivoActionPerformed

    }//GEN-LAST:event_nombreArchivoActionPerformed

    private void CodeCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_CodeCaretPositionChanged

    }//GEN-LAST:event_CodeCaretPositionChanged

    private void CodeCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_CodeCaretUpdate
        //int x = Integer.parseInt(jTextPane6.getCaret().toString());
        //int y = jTextPane6.getCaret().getMagicCaretPosition().y;

        modificado = true;
        int caretPosition = Code.getCaretPosition();
        Element root = Code.getDocument().getDefaultRootElement();
        int currentLine = root.getElementIndex(caretPosition);
        int columna = 0, aux = 0;
        try {
            String[] particion = Code.getText().split("\n");
            for (int i = 0; i < currentLine; i++) {
                if (i < particion.length) {
                    columna += particion[i].length();
                }
                columna++;
            }
            columna = Code.getCaret().getDot() - columna;
        } catch (Exception e) {

        }
        if (activo) {
            jLabel1.setText(" Fila: " + (currentLine + 1) + "; Columna: " + columna + ". ");
        } else {
            jLabel1.setText("");
        }

        if (ruta != null) {
            String[] particion = ruta.split("/");
            nombreArchivo.setText(particion[particion.length - 1] + "*");
        }

    }//GEN-LAST:event_CodeCaretUpdate

    private void CodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CodeMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON3) {
        }
    }//GEN-LAST:event_CodeMouseClicked

    private void ExpandirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExpandirActionPerformed
        for (int i = 0; i < Sintactico.getRowCount(); i++) {
            Sintactico.expandRow(i);
        }
    }//GEN-LAST:event_ExpandirActionPerformed

    private void ColapsarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColapsarActionPerformed
        for (int i = Sintactico.getRowCount(); i >=0; i--) {
            Sintactico.collapseRow(i);
        }
    }//GEN-LAST:event_ColapsarActionPerformed

    private void Expandir2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Expandir2ActionPerformed
        for (int i = 0; i < Semántico.getRowCount(); i++) {
            Semántico.expandRow(i);
        }
    }//GEN-LAST:event_Expandir2ActionPerformed

    private void Colapsar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Colapsar2ActionPerformed
        for (int i = Semántico.getRowCount(); i >=0; i--) {
            Semántico.collapseRow(i);
        }
    }//GEN-LAST:event_Colapsar2ActionPerformed

    private void CompilarEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompilarEjecutarActionPerformed
        ejecutar();
    }//GEN-LAST:event_CompilarEjecutarActionPerformed

    private void jMenu10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu10MouseClicked
        ejecutar();
    }//GEN-LAST:event_jMenu10MouseClicked

    private void jMenu10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu10ActionPerformed
        
    }//GEN-LAST:event_jMenu10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }

    private void abrirArchivo() {
        // Selector de archivo con filtro.
        JFileChooser selectorArchivos = new JFileChooser("/Users/y4iro/Desktop");
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos tipo " + formato, formato);
        selectorArchivos.setFileFilter(filtro);
        selectorArchivos.setFileSelectionMode(JFileChooser.FILES_ONLY);
        // Selección del usuario
        int resultado = selectorArchivos.showOpenDialog(this);
        // Obtención del archivo seleccionado
        File archivo = selectorArchivos.getSelectedFile(); // obtiene el archivo seleccionado
        // muestra error si es inválido
        if ((archivo == null) || (archivo.getName().equals(""))) {
            JOptionPane.showMessageDialog(this, "No se ha abierto el archivo.", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            ruta = archivo.getAbsolutePath();
            Scanner scn;
            try {
                scn = new Scanner(archivo);
                String contenido = "";
                Code.setText(contenido);
                while (scn.hasNext()) {
                    contenido += (scn.nextLine()) + "\n";
                }
                Code.setText(contenido);
                Code.setEnabled(true);
                permiso = true;
                Code.grabFocus();
                String[] particion = ruta.split("/");
                nombreArchivo.setText(particion[particion.length - 1]);
                activo = true;
                modificado = false;
            } catch (FileNotFoundException ex) {

            }
        }
    }

    private void crearArchivo() {
        Code.setText("");
        Code.setEnabled(true);
        Code.grabFocus();
        nombreArchivo.setText("ARCHIVO NUEVO");
        permiso = true;
        activo = true;
        ruta = null;
    }

    private void guardarArchivo() {
        if (permiso) {
            if (ruta == null) {
                guardarComoArchivo();
            } else {
                try {
                    File archivo = new File(ruta);
                    BufferedWriter bw = new BufferedWriter(new FileWriter(archivo));
                    bw.write(Code.getText());
                    bw.close();
                } catch (IOException ex) {
                    Logger.getLogger(frame.class.getName()).log(Level.SEVERE, null, ex);
                }
                modificado = false;
                String[] particion = ruta.split("/");
                nombreArchivo.setText(particion[particion.length - 1]);
            }
        }
    }

    private void guardarComoArchivo() {
        if (permiso) {
            JFileChooser selectorDirectorios = new JFileChooser();
            if (selectorDirectorios.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                String rutaux = selectorDirectorios.getSelectedFile().getAbsolutePath() + "." + formato;
                if (ruta == null) {
                    File af = new File(rutaux);
                    if (af.exists()) {
                        if (JOptionPane.showConfirmDialog(null, "¿Seguro que deseas sobreescribir el archivo?", "ARCHIVO EXISTENTE", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                            ruta = rutaux;
                            String[] particion = ruta.split("/");
                            nombreArchivo.setText(particion[particion.length - 1]);
                            guardarArchivo();
                        }
                    } else {
                        ruta = rutaux;
                        String[] particion = ruta.split("/");
                        nombreArchivo.setText(particion[particion.length - 1]);
                        guardarArchivo();
                    }
                } else if (rutaux.equals(ruta)) {
                    if (JOptionPane.showConfirmDialog(null, "¿Seguro que deseas sobreescribir el archivo?", "ARCHIVO EXISTENTE", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                        String[] particion = ruta.split("/");
                        nombreArchivo.setText(particion[particion.length - 1]);
                        guardarArchivo();
                    }
                } else {
                    ruta = rutaux;
                    String[] particion = ruta.split("/");
                    nombreArchivo.setText(particion[particion.length - 1]);
                    guardarArchivo();
                }
            } else {
                permiso = false;
                JOptionPane.showMessageDialog(this, "No se ha guardado el archivo.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void cerrarArchivo() {
        if (modificado) {
            if (JOptionPane.showConfirmDialog(null, "¿Seguro que deseas cerrar el archivo sin guardar?", "ARCHIVO EDITADO", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                Code.setText("");
                Code.setEnabled(false);
                nombreArchivo.setText("");
                permiso = false;
                ruta = null;
                jLabel1.setText("");
                modificado = false;
                activo = false;
            }
        } else {
            Code.setText("");
            Code.setEnabled(false);
            nombreArchivo.setText("");
            permiso = false;
            ruta = null;
            jLabel1.setText("");
            modificado = false;
            activo = false;
        }
        Lexico.setText("");
        Errores.setText("");
        Salida.setText("");
        TablaHASH.setText("");
        CodigoIntermedio.setText("");
        root = null;
        modelo = new DefaultTreeModel(root);
        Sintactico.setModel(modelo);
        Semántico.setModel(modelo);
        terminal.setText("");
    }

    private void compilarLexico() {
        Salida.setText("COMPILANDO LEXICO");
        guardarArchivo();
        if (permiso) {
            Salida.setText(Salida.getText() + "\n\t" + ruta);
            try {
                String line;
                BufferedReader read;
                
                Process p = Runtime.getRuntime().exec("mv  Compilador/Errores.txt ./");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/Lexema.txt ./");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/MuestraLexema.txt ./");
                p.waitFor();
                
                p = Runtime.getRuntime().exec("python Compilador/lexico.py " + ruta);
                p.waitFor();
                
                p = Runtime.getRuntime().exec(" mv Errores.txt Compilador ");
                p.waitFor();
                p = Runtime.getRuntime().exec(" mv Lexema.txt Compilador ");
                p.waitFor();
                p = Runtime.getRuntime().exec(" mv MuestraLexema.txt Compilador ");
                p.waitFor();
                Salida.setText(Salida.getText() + "\nCompilación léxico terminado exitosamente.");
                
                // ESCRIBIR EN ERRORES
                Salida.setText(Salida.getText() + "\n\tGenerando archivo de errores.");
                p = Runtime.getRuntime().exec("cat Compilador/Errores.txt");
                read = new BufferedReader(new InputStreamReader(p.getInputStream()));
                Errores.setText("");
                while ((line = read.readLine()) != null) {
                    Errores.setText(Errores.getText() + (line) + "\n");
                }
                read.close();
                p.waitFor();

                // ESCRIBIR EN LEXICO
                Salida.setText(Salida.getText() + "\n\tGenerando archivo de tokens.");
                p = Runtime.getRuntime().exec("cat Compilador/MuestraLexema.txt");
                read = new BufferedReader(new InputStreamReader(p.getInputStream()));
                Lexico.setText("");
                while ((line = read.readLine()) != null) {
                    Lexico.setText(Lexico.getText() + (line) + "\n");
                }
                read.close();
                p.waitFor();
                p.destroy();
                Salida.setText(Salida.getText() + "\nArchivos generados exitosamente.");

            } catch (Exception e) {
                Salida.setText(Salida.getText() + "\n\t" + e.toString());
            }

        } else {
            Salida.setText(Salida.getText() + "\nNO SE TIENE EL ARCHIVO PARA COMPILAR");
            Lexico.setText("");
            Errores.setText("");
        }

    }

    private void compilarSintactico() {
        compilarLexico();
        Salida.setText(Salida.getText() + "\n\nCOMPILANDO SINTÁCTICO");
        if (permiso) {
            try {
                String line;
                BufferedReader read;
                
                //MOVEMOS LOS ARCHIVOS QUE REQUERIMOS
                Process p = Runtime.getRuntime().exec("mv  Compilador/Errores.txt ./");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/Lexema.txt ./");
                p.waitFor();
                //p = Runtime.getRuntime().exec("mv  Compilador/sintactico.py ./");
                //p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/MuestraSintaxis.txt ./");
                p.waitFor();
                
                //COMPILAMOS ARCHIVOS
                p = Runtime.getRuntime().exec("python  Compilador/archivos.py");
                p.waitFor();
                
                //MOVEMOS LOS ARCHIVOS A LA CARPETA ORIGINAL
                p = Runtime.getRuntime().exec("mv  Errores.txt Compilador");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Lexema.txt Compilador");
                p.waitFor();
                //p = Runtime.getRuntime().exec("mv  sintactico.py Compilador");
                //p.waitFor();
                p = Runtime.getRuntime().exec("mv  MuestraSintaxis.txt Compilador");
                p.waitFor();
              
                // ESCRIBIR EN ERRORES
                Salida.setText(Salida.getText() + "\n\tActualizando archivo de errores.");
                Salida.setText(Salida.getText() + "\n\tArchivo de errores actualizado exitosamente.");
                p = Runtime.getRuntime().exec("cat Compilador/Errores.txt");
                read = new BufferedReader(new InputStreamReader(p.getInputStream()));
                Errores.setText("");
                while ((line = read.readLine()) != null) {
                    Errores.setText(Errores.getText() + (line) + "\n");
                }
                read.close();
                p.waitFor();
                
                Salida.setText(Salida.getText() + "\n\tGenerando archivo de sintaxis.");
                p.destroy();
                Salida.setText(Salida.getText() + "\nArchivo generado exitosamente.");

            } catch (Exception e) {
                Salida.setText(Salida.getText() + "\n\t" + e.toString());
            }
            //Muestra resultados
            root = new DefaultMutableTreeNode(nombreArchivo.getText());
            modelo = new DefaultTreeModel(root);
            Sintactico.setModel(modelo);
            try {
                String archivo = "Compilador/MuestraSintaxis.txt";
                String cadena;
                FileReader f = new FileReader(archivo);
                BufferedReader b = new BufferedReader(f);
                Queue<String> cola = new LinkedList();
                while ((cadena = b.readLine()) != null) {
                    cola.add(cadena);
                }
                cadenita(cola, root, 0, 0, modelo);
                b.close();
            } catch (Exception e) {
                Salida.setText(Salida.getText() + "\n\t" + e.toString());
            }
            for (int i = 0; i < Sintactico.getRowCount(); i++) {
                Sintactico.expandRow(i);
            }
        } else {
            Salida.setText(Salida.getText() + "\nNO SE PUEDE COMPILAR SINTÁCTICO");
            Sintactico.setModel(new DefaultTreeModel(null));
        }
    }

    private void cadenita(Queue<String> cola, DefaultMutableTreeNode padre, int nivel, int posicion, DefaultTreeModel modelo) {
        String siguiente = cola.peek();
        if (siguiente != null) {
            int contador = 0;
            while ('\t' == siguiente.charAt(contador)) {
                contador++;
            }
            if (contador == nivel) {
                DefaultMutableTreeNode hijo = new DefaultMutableTreeNode(cola.poll().substring(contador));
                modelo.insertNodeInto(hijo, padre, posicion);
                
                // EVALUAMOS FUTURO HIJO
                siguiente = cola.peek();
                if (siguiente != null) {
                    contador = 0;
                    while ('\t' == siguiente.charAt(contador)) {
                        contador++;
                    }
                    if (contador > nivel) {
                        cadenita(cola, hijo, nivel + 1, 0, modelo);
                    }
                }
                cadenita(cola, padre, nivel, posicion+1, modelo);
            }
        }
    }

    private void compilarSemantico() {
        compilarSintactico();
        Salida.setText(Salida.getText() + "\n\nCOMPILANDO SEMÁNTICO");
        if (permiso) {
            
            try {
                String line;
                BufferedReader read;
                
                //MOVEMOS LOS ARCHIVOS QUE REQUERIMOS
                Process p = Runtime.getRuntime().exec("mv  Compilador/Errores.txt ./");
                p.waitFor();
                //p = Runtime.getRuntime().exec("mv  Compilador/sintactico.py ./");
                //p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/Lexema.txt ./");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/hashtable.txt ./");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/MuestraSemantico.txt ./");
                p.waitFor();
                
                //COMPILAMOS ARCHIVOS
                p = Runtime.getRuntime().exec("python  Compilador/semantico.py");
                p.waitFor();
                //System.out.println( (new BufferedReader(new InputStreamReader(p.getInputStream()))).readLine() );
                
                //MOVEMOS LOS ARCHIVOS A LA CARPETA ORIGINAL
                p = Runtime.getRuntime().exec("mv  Errores.txt Compilador");
                p.waitFor();
                //p = Runtime.getRuntime().exec("mv  sintactico.py Compilador");
                //p.waitFor();
                p = Runtime.getRuntime().exec("mv  Lexema.txt Compilador");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  hashtable.txt Compilador");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  MuestraSemantico.txt Compilador");
                p.waitFor();
                
                // ESCRIBIR EN ERRORES
                Salida.setText(Salida.getText() + "\n\tActualizando archivo de errores.");
                Salida.setText(Salida.getText() + "\n\tArchivo de errores actualizado exitosamente.");
                p = Runtime.getRuntime().exec("cat Compilador/Errores.txt");
                read = new BufferedReader(new InputStreamReader(p.getInputStream()));
                Errores.setText("");
                while ((line = read.readLine()) != null) {
                    Errores.setText(Errores.getText() + (line) + "\n");
                }
                read.close();
                p.waitFor();
                
                // ESCRIBIR HASH TABLE
                p = Runtime.getRuntime().exec("cat Compilador/hashtable.txt");
                read = new BufferedReader(new InputStreamReader(p.getInputStream()));
                TablaHASH.setText("");
                while ((line = read.readLine()) != null) {
                    TablaHASH.setText(TablaHASH.getText() + (line) + "\n");
                }
                read.close();
                p.waitFor();
                
                Salida.setText(Salida.getText() + "\n\tGenerando archivo de semántica.");
                Salida.setText(Salida.getText() + "\n\tGenerando tabla HASH.");
                p.destroy();
                Salida.setText(Salida.getText() + "\nArchivos generados exitosamente.");

            } catch (Exception e) {
                Salida.setText(Salida.getText() + "\n\t" + e.toString());
            }
            //Muestra resultados
            root = new DefaultMutableTreeNode(nombreArchivo.getText());
            modelo = new DefaultTreeModel(root);
            Semántico.setModel(modelo);
            try {
                String archivo = "Compilador/MuestraSemantico.txt";
                String cadena;
                FileReader f = new FileReader(archivo);
                BufferedReader b = new BufferedReader(f);
                Queue<String> cola = new LinkedList();
                while ((cadena = b.readLine()) != null) {
                    cola.add(cadena);
                }
                cadenita(cola, root, 0, 0, modelo);
                b.close();
            } catch (Exception e) {
                Salida.setText(Salida.getText() + "\n\t" + e.toString());
            }
            for (int i = 0; i < Sintactico.getRowCount(); i++) {
                Semántico.expandRow(i);
            }

        } else {
            Salida.setText(Salida.getText() + "\nNO SE PUEDE COMPILAR SINTÁCTICO");
            Semántico.setModel(new DefaultTreeModel(null));
        }
    }
    
    private void ejecutar(){
        compilarSemantico();
        if(permiso){
            try {
                Salida.setText(Salida.getText() + "\n\nGENERACIÓN DE CÓDIGO");
                Salida.setText(Salida.getText() + "\n\tGenerando código intermedio.");
                terminal.setText("");
                
                //MOVEMOS LOS ARCHIVOS QUE REQUERIMOS
                Process p = Runtime.getRuntime().exec("mv  Compilador/CodigoIntermedio/sintactico.py ./");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/Lexema.txt ./");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/CodigoIntermedio/semantico.py ./");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Compilador/CodigoIntermedio/ejecucion.py ./");
                p.waitFor();
                
                //COMPILAMOS ARCHIVOS
                p = Runtime.getRuntime().exec("python  ejecucion.py");
                p.waitFor();
                
                //MOVEMOS LOS ARCHIVOS A LA CARPETA ORIGINAL
                p = Runtime.getRuntime().exec("mv  sintactico.py Compilador/CodigoIntermedio");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  ejecucion.py Compilador/CodigoIntermedio");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  Lexema.txt Compilador");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  semantico.py Compilador/CodigoIntermedio");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  code.txt Compilador/CodigoIntermedio");
                p.waitFor();
                p = Runtime.getRuntime().exec("mv  code2.txt Compilador/CodigoIntermedio");
                p.waitFor();
                
                //MUESTRACODIGOINTERMEDIO
                Salida.setText(Salida.getText() + "\n\tDesplegando código intermedio.");
                String line;
                BufferedReader read;
                p = Runtime.getRuntime().exec("cat Compilador/CodigoIntermedio/code.txt");
                read = new BufferedReader(new InputStreamReader(p.getInputStream()));
                CodigoIntermedio.setText("");
                while ((line = read.readLine()) != null) {
                    CodigoIntermedio.setText(CodigoIntermedio.getText() + (line) + "\n");
                }
                read.close();
                p.waitFor();
                
                p.destroy();
                
                Salida.setText(Salida.getText() + "\nArchivo generado exitosamente.");
                Salida.setText(Salida.getText() + "\n\nEJECUTANDO");
                
                terminal.setText("");
                terminal.requestFocus();
                Terminal term = new Terminal(terminal);
                term.start();

            } catch (Exception e) {
                Salida.setText(Salida.getText() + "\n\t" + e.toString());
            }
        } else {
            Salida.setText(Salida.getText() + "\n\nNO SE PUEDE EJECUTAR");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane Code;
    private javax.swing.JTextPane CodigoIntermedio;
    private javax.swing.JMenuItem Colapsar;
    private javax.swing.JMenuItem Colapsar2;
    private javax.swing.JMenuItem CompilarEjecutar;
    private javax.swing.JTextPane Errores;
    private javax.swing.JMenuItem Expandir;
    private javax.swing.JMenuItem Expandir2;
    private javax.swing.JTextPane Lexico;
    private javax.swing.JTextPane Salida;
    private javax.swing.JTree Semántico;
    private javax.swing.JTree Sintactico;
    private javax.swing.JTextPane TablaHASH;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JMenu nombreArchivo;
    private javax.swing.JTextArea terminal;
    // End of variables declaration//GEN-END:variables
}
